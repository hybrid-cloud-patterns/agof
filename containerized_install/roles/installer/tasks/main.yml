---
- name: Check to see whether AAP is already running
  ansible.builtin.uri:
    url: 'https://127.0.0.1/api/controller/v2/ping/'
    method: GET
    user: '{{ admin_user | default("admin") }}'
    password: "{{ admin_password }}"
    validate_certs: false
  register: aap_check
  until: aap_check.json is defined and aap_check.json.instances[0].capacity > 0 and aap_check.json.instance_groups[0].capacity > 0
  ignore_errors: true

- name: Run AAP Containerized installer
  when:
    - (force_aap_reconfigure) or (aap_check is failed)
  block:
    - name: Download containerized installer
      ansible.builtin.include_role:
        name: infra.aap_utilities.aap_setup_download
      vars:
        aap_setup_down_offline_token: "{{ offline_token }}"
        aap_setup_down_version: "{{ containerized_installer_version }}"
        aap_setup_down_type: containerized-setup
        aap_setup_down_dest_dir: "{{ containerized_installer_user_home }}"
        aap_setup_containerized: true

    - name: Extract containerized installer
      ansible.builtin.unarchive:
        src: "{{ aap_setup_down_installer_file }}"
        dest: "{{ containerized_installer_user_home }}"
        owner: "{{ containerized_installer_user }}"
        group: "{{ containerized_installer_user }}"
        remote_src: true

    - name: Determine install directory
      ansible.builtin.find:
        paths: "{{ containerized_installer_user_home }}"
        file_type: directory
        use_regex: true
        patterns:
          - 'ansible-automation-platform-containerized-setup'
      register: aap_directories

    - name: Set directory fact
      ansible.builtin.set_fact:
        aap_installer_dir: "{{ (aap_directories.files | sort(attribute='mtime', reverse=true) | first).path }}"

    - name: Determine controller_fqdn from inside the user environment
      ansible.builtin.command: |-
        hostname -f
      register: local_hostname

    - name: Set controller_fqdn to local hostname
      ansible.builtin.set_fact:
        controller_fqdn: "{{ local_hostname.stdout | trim }}"

    - name: Template inventory file
      ansible.builtin.template:
        src: containerized_install_inventory.j2
        dest: "{{ aap_installer_dir }}/inventory"
        owner: "{{ containerized_installer_user }}"
        group: "{{ containerized_installer_user }}"
        mode: "0600"

    - name: Copy manifest
      ansible.builtin.copy:
        content: "{{ manifest_content | b64decode }}"
        dest: "{{ controller_license_file }}"
        owner: "{{ containerized_installer_user }}"
        group: "{{ containerized_installer_user }}"
        mode: "0600"

    - name: Run containerized installer
      ansible.builtin.command:
        chdir: "{{ aap_installer_dir }}"
        cmd: |-
          ansible-playbook -i inventory ansible.containerized_installer.install
      async: 3600
      poll: 15
