---
- name: Get the VPC ID for {{ ec2_name_prefix }}
  amazon.aws.ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_name_prefix }}-vpc"
    region: "{{ ec2_region }}"
  register: vpc_net_facts

- name: debug vpc_net_facts
  debug:
    var: vpc_net_facts
  when: debug_teardown

- name: debugging vpc id for {{ ec2_name_prefix }}
  debug:
    msg: "vpc id:'{{vpc_net_facts.vpcs[0].id}}'"
  when:
    - debug_teardown
    - vpc_net_facts.vpcs|length > 0

- name: use set fact for easier variables
  set_fact:
    ec2_vpc_id: "{{vpc_net_facts.vpcs[0].id|default('WORKSHOP_UNDEF')}}"
    ec2_security_group: "{{ ec2_name_prefix }}-insecure_all"
  when: ec2_security_group is undefined

- name: debug ec2_vpc_id
  debug:
    var: ec2_vpc_id
  when: debug_teardown

- name: debug ec2_security_group
  debug:
    var: ec2_security_group
  when: debug_teardown

# retrieve instances for VPC 1
- name: grab vpc node facts for workshop
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      "vpc-id": "{{ec2_vpc_id}}"
  register: all_workshop_vpc_nodes

- name: debug all_workshop_vpc_nodes
  debug:
    var: all_workshop_vpc_nodes
  when: debug_teardown

# Destroy VPC 1 instances
- name: destroy EC2 instances
  amazon.aws.ec2_instance:
    region: "{{ ec2_region }}"
    state: absent
    instance_ids: "{{ all_workshop_vpc_nodes.instances | map(attribute='instance_id') | list }}"
    wait: true
    wait_timeout: "{{ 600 | int}}"
  register: result_ec2_destroy
  when:
    - all_workshop_vpc_nodes.instances
    - not aws_cli_destroy_ec2|default(false)|bool

- name: debug result_ec2_destroy
  debug:
    var: result_ec2_destroy
  when: debug_teardown

- name: Cleanup subnets for {{ ec2_name_prefix }}-vpc (SECURITY MODE)
  block:
    - name: Get left ENI
      amazon.aws.ec2_eni_info:
        region: "{{ ec2_region }}"
        filters:
          "vpc-id": '{{ ec2_vpc_id }}'
      register: dangling_eni_info

    - name: debug dangling_eni_info
      debug:
        var: dangling_eni_info
      when: debug_teardown

    - name: Delete dangling ENIs from for {{ ec2_name_prefix }}-vpc
      amazon.aws.ec2_eni:
        region: "{{ ec2_region }}"
        eni_id: "{{item['id']}}"
        state: absent
      loop: "{{dangling_eni_info['network_interfaces']}}"

    - name: Get subnet1 eni_info
      amazon.aws.ec2_eni_info:
        region: "{{ ec2_region }}"
        filters:
          "tag:Subnet": '{{ ec2_name_prefix }}-subnet1'
      register: subnet1_eni_info

    - name: debug subnet1_eni_info
      debug:
        var: subnet1_eni_info
      when: debug_teardown

    - name: Delete subnet1 for {{ ec2_name_prefix }}-vpc
      amazon.aws.ec2_vpc_subnet:
        region: "{{ ec2_region }}"
        az: "{{ec2_az}}"
        vpc_id: "{{ec2_vpc_id}}"
        cidr: "{{ec2_subnet}}"
        state: absent

- name: Deleted EC2 security group for VPC vpc-{{ ec2_name_prefix }}
  amazon.aws.ec2_group:
    name: "{{ec2_security_group}}"
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    state: absent
  register: delete_sg
  until: delete_sg is not failed
  retries: 50
  when: vpc_net_facts.vpcs|length > 0

# delete ec2_subnet for vpc-1
- name: Delete subnet for {{ ec2_name_prefix }}-vpc
  amazon.aws.ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ec2_az}}"
    vpc_id: "{{ec2_vpc_id}}"
    cidr: "{{ec2_subnet}}"
    state: absent

# delete ec2_network_vpc2 for vpc-2
- name: Delete subnet for {{ ec2_name_prefix }}-vpc2 (NETWORK MODE)
  amazon.aws.ec2_vpc_subnet:
    region: "{{ ec2_region }}"
    az: "{{ec2_az}}"
    vpc_id: "{{ec2_vpc_id2}}"
    cidr: "{{ec2_network_vpc2}}"
    state: absent
  when:
    - workshop_type == 'networking' or workshop_type == 'network' or workshop_type == 'demo'
    - vpc_net_facts2.vpcs|length > 0

- name: vpc internet gateway is deleted for vpc-{{ ec2_name_prefix }}
  amazon.aws.ec2_vpc_igw:
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    state: absent

- name: grab route information for {{ ec2_name_prefix }} on {{ ec2_region }}
  amazon.aws.ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ec2_vpc_id}}"
  register: route_table_facts

- name: vpc public subnet route table is deleted
  amazon.aws.ec2_vpc_route_table:
    region: "{{ ec2_region }}"
    vpc_id: "{{ec2_vpc_id}}"
    route_table_id: "{{item.id}}"
    lookup: id
    state: absent
  with_items: "{{route_table_facts.route_tables}}"
  when: item.associations == []

- name: set keys for instance creation dynamically since key was not supplied by user
  set_fact:
    ec2_key_name: "{{ ec2_name_prefix }}-key"

- name: delete ssh key pair for workshop {{ ec2_name_prefix }}
  amazon.aws.ec2_key:
    name: "{{ec2_key_name}}"
    region: "{{ ec2_region }}"
    state: absent

- name: delete s3 bucket for persistent storage of ec2 key
  amazon.aws.s3_bucket:
    name: "{{ ec2_name_prefix|lower }}.{{ pattern_dns_zone|lower }}.private"
    state: absent
    region: "{{ ec2_region }}"
    force: true
  retries: 4
  delay: 15
  register: s3_result
  until:
    - s3_result.failed == false

# delete VPCS
- name: delete AWS VPC {{ ec2_name_prefix }}
  amazon.aws.ec2_vpc_net:
    name: "{{ ec2_name_prefix }}-vpc"
    cidr_block: "{{ ec2_subnet }}"
    region: "{{ ec2_region }}"
    state: absent

- name: Remove IAM roles & policy block
  block:
    - name: Remove IAM policy for control node IAM instance role
      community.aws.iam_policy:
        iam_type: role
        iam_name: "ControlNode_{{ ec2_name_prefix }}_student{{ item }}"
        policy_name: "IAMPolicy_{{ ec2_name_prefix }}_student{{ item }}"
        state: absent
      loop: "{{ range(1, student_total + 1)|list }}"

    - name: Remove VPC Lock Down role
      community.aws.iam_role:
        name: "VPCLockDown_{{ ec2_name_prefix }}_student{{ item }}"
        state: absent
        delete_instance_profile: true
      loop: "{{ range(1, student_total + 1)|list }}"

    - name: Remove control node instance role
      community.aws.iam_role:
        name: "ControlNode_{{ ec2_name_prefix }}_student{{ item }}"
        state: absent
        delete_instance_profile: true
      loop: "{{ range(1, student_total + 1)|list }}"

  when: tower_node_aws_api_access|default(false)|bool
  ignore_errors: true
